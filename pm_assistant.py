#!/usr/bin/python3

import argparse
import csv
import os
import subprocess
from colorama import Fore, Back, Style
from scapy.all import *  # Import scapy for packet dissection
import textwrap  # Import the textwrap module

# Define colors for output
COLORS = {
    "white": Fore.WHITE,
    "red": Fore.RED,
    "green": Fore.GREEN,
    "yellow": Fore.YELLOW,
    "blue": Fore.BLUE,
    "magenta": Fore.MAGENTA,
    "cyan": Fore.CYAN,
    "reset": Fore.RESET,
}


def colorize(text, color):
    """Colorizes the given text with the specified color."""
    if color in COLORS:
        return f"{COLORS[color]}{text}{COLORS['reset']}"
    else:
        return text


def read_hex_data(data, method="scapy"):
    """Reads and interprets hex data using the specified method."""
    if method.lower() == "scapy":
        try:
            # Use Scapy to interpret the hex data
            packet = Ether(bytes.fromhex(data))
            return packet.show()  # Return Scapy's detailed packet representation
        except Exception as e:
            return f"Error interpreting with Scapy: {e}"
    elif method.lower() == "xxd":
        try:
            # Use xxd (external command) to display hexdump
            result = subprocess.run(
                ["xxd", "-p", "-r", "-"], input=data.encode(), capture_output=True
            )
            return result.stdout.decode()
        except FileNotFoundError:
            return "Error: xxd command not found. Please install it."
        except Exception as e:
            return f"Error interpreting with xxd: {e}"
    else:
        return f"Error: Invalid hex data interpretation method: {method}"


def print_csv_data(
    filename,
    row_num=None,
    columns=None,
    interpret_hex=False,
    hex_method="scapy",
    all_rows=False,
):
    """Reads and prints data from the CSV file."""
    try:
        # Check if the CSV file exists
        if not os.path.exists(filename):
            print(
                f"{colorize('Error:', 'red')} CSV file '{colorize(filename, 'yellow')}' not found. Make sure 'packet_master.py' has been run."
            )
            return

        with open(filename, "r") as csvfile:
            reader = csv.reader(csvfile)
            header = next(reader)  # Get the header row

            # Print header with color
            print(
                colorize("Row", "cyan"),
                end="",
            )
            for i, col in enumerate(header):
                print(f" | {colorize(col, 'yellow')}", end="")
            print(colorize(" |", "cyan"))

            # Process rows
            for i, row in enumerate(reader):
                if all_rows or (row_num and i + 1 == row_num):
                    # Print row number with color
                    print(colorize(f"{i+1: <3}", "cyan"), end="")

                    # Print selected columns or all columns
                    for j, value in enumerate(row):
                        if not columns or (columns and j + 1 in columns):
                            if interpret_hex and header[j] == "Data":
                                value = read_hex_data(value, hex_method)
                            print(f" | {colorize(value, 'green')}", end="")
                    print(colorize(" |", "cyan"))

    except Exception as e:
        print(f"{colorize('Error:', 'red')} {e}")


# Define CSV filename
CSV_FILENAME = "packet_capture.csv"

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=textwrap.dedent(
            f"""
            {colorize('CSV Data Extractor', 'white')} - {colorize('A tool to read and extract data from the CSV file generated by packet_master.py.', 'green')}

            {colorize('Usage:', 'yellow')}
                {colorize('python csv_data_reader.py [options]', 'cyan')}

            {colorize('Options:', 'yellow')}
                {colorize('-f, --file <filename>', 'magenta')}
                    {colorize('Path to the CSV file (default: packet_capture.csv)', 'cyan')}

                {colorize('-r, --row <row_number>', 'magenta')}
                    {colorize('Row number to extract data from (default: None)', 'cyan')}

                {colorize('-c, --columns <column_numbers>', 'magenta')}
                    {colorize('Comma-separated column numbers to extract (default: All)', 'cyan')}
                    {colorize('Example:', 'blue')} {colorize('-c 1,3', 'white')}

                {colorize('-x, --interpret-hex', 'magenta')}
                    {colorize('Interpret hex data in the "Data" column (default: False)', 'cyan')}

                {colorize('-m, --hex-method <method>', 'magenta')}
                    {colorize('Method for interpreting hex data (scapy, xxd; default: scapy)', 'cyan')}

                {colorize('-a, --all-rows', 'magenta')}
                    {colorize('Display data from all rows (default: False)', 'cyan')}
            """
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )

    parser.add_argument(
        "-f",
        "--file",
        metavar="<filename>",
        default=CSV_FILENAME,
        help=argparse.SUPPRESS,  # Hide from help text
    )
    parser.add_argument(
        "-r",
        "--row",
        metavar="<row_number>",
        type=int,
        help=argparse.SUPPRESS,  # Hide from help text
    )
    parser.add_argument(
        "-c",
        "--columns",
        metavar="<column_numbers>",
        help=argparse.SUPPRESS,  # Hide from help text
    )
    parser.add_argument(
        "-x",
        "--interpret-hex",
        action="store_true",
        help=argparse.SUPPRESS,  # Hide from help text
    )
    parser.add_argument(
        "-m",
        "--hex-method",
        metavar="<method>",
        default="scapy",
        help=argparse.SUPPRESS,  # Hide from help text
    )
    parser.add_argument(
        "-a",
        "--all-rows",
        action="store_true",
        help=argparse.SUPPRESS,  # Hide from help text
    )

    args = parser.parse_args()

    # Parse columns if provided
    if args.columns:
        try:
            columns = [int(col.strip()) for col in args.columns.split(",")]
        except ValueError:
            print(
                f"{colorize('Error:', 'red')} Invalid column numbers provided. Use comma-separated integers."
            )
            exit(1)
    else:
        columns = None

    # Print the extracted data
    print_csv_data(
        args.file,
        args.row,
        columns,
        args.interpret_hex,  # Corrected attribute name
        args.hex_method,
        args.all_rows,
    )
